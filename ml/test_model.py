#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
"""

import os
import sys
from pathlib import Path

def test_models():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    
    models_dir = Path('models')
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
    print(f"üìÅ –ü–∞–ø–∫–∞ –º–æ–¥–µ–ª–µ–π: {models_dir.absolute()}")
    
    if not models_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ models/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–µ–π
    cleanliness_model = models_dir / 'cleanliness_model.pth'
    condition_model = models_dir / 'condition_model.pth'
    unified_model = models_dir / 'best_unified_model.pth'
    
    models_found = []
    
    if cleanliness_model.exists():
        size = cleanliness_model.stat().st_size / (1024*1024)  # MB
        print(f"‚úÖ cleanliness_model.pth ({size:.1f} MB)")
        models_found.append('cleanliness')
    
    if condition_model.exists():
        size = condition_model.stat().st_size / (1024*1024)  # MB
        print(f"‚úÖ condition_model.pth ({size:.1f} MB)")
        models_found.append('condition')
    
    if unified_model.exists():
        size = unified_model.stat().st_size / (1024*1024)  # MB
        print(f"‚úÖ best_unified_model.pth ({size:.1f} MB)")
        models_found.append('unified')
    
    if not models_found:
        print("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return False
    
    print(f"\nüéâ –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models_found)}")
    return True

def test_inference():
    """–¢–µ—Å—Ç –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞"""
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞...")
    
    # –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    test_images = []
    data_dir = Path('../data')
    
    for folder in ['clean', 'dirty', 'intact', 'damaged']:
        folder_path = data_dir / folder
        if folder_path.exists():
            for ext in ['.jpg', '.jpeg', '.png']:
                images = list(folder_path.glob(f'*{ext}'))
                if images:
                    test_images.extend(images[:1])  # –ë–µ—Ä–µ–º –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏
    
    if not test_images:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø–µ—Ä–≤–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    test_image = test_images[0]
    print(f"üñºÔ∏è  –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_image}")
    
    try:
        import subprocess
        result = subprocess.run([
            sys.executable, 'analyze.py', str(test_image)
        ], capture_output=True, text=True, cwd='.')
        
        if result.returncode == 0:
            print("‚úÖ –ò–Ω—Ñ–µ—Ä–µ–Ω—Å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(result.stdout)
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞:")
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–£–ß–ï–ù–ù–´–• –ú–û–î–ï–õ–ï–ô")
    print("=" * 50)
    
    models_ok = test_models()
    
    if models_ok:
        inference_ok = test_inference()
        
        if inference_ok:
            print("\nüéâ –í–°–Å –ì–û–¢–û–í–û!")
            print("üåê –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
            print("   npm run start:dev")
            print("\nüì± –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:5173")
            print("üîÆ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ!")
        else:
            print("\n‚ö†Ô∏è  –ú–æ–¥–µ–ª–∏ –µ—Å—Ç—å, –Ω–æ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª analyze.py")
    else:
        print("\n‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ")