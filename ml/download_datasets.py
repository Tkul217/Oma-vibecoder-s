#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç—ã —Å Roboflow –¥–ª—è —Ü–∞—Ä–∞–ø–∏–Ω, –≤–º—è—Ç–∏–Ω –∏ —Ä–∂–∞–≤—á–∏–Ω—ã
"""

import os
import requests
import zipfile
import shutil
from pathlib import Path
import json
from PIL import Image
import cv2
import numpy as np

def download_file(url, filename):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º {filename}...")
    
    response = requests.get(url, stream=True)
    total_size = int(response.headers.get('content-length', 0))
    
    with open(filename, 'wb') as file:
        downloaded = 0
        for chunk in response.iter_content(chunk_size=8192):
            if chunk:
                file.write(chunk)
                downloaded += len(chunk)
                if total_size > 0:
                    percent = (downloaded / total_size) * 100
                    print(f"\rüìä {percent:.1f}% ({downloaded}/{total_size} bytes)", end='')
    
    print(f"\n‚úÖ {filename} –∑–∞–≥—Ä—É–∂–µ–Ω!")

def setup_roboflow_dataset():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å Roboflow"""
    
    print("ü§ñ –ù–ê–°–¢–†–û–ô–ö–ê ROBOFLOW –î–ê–¢–ê–°–ï–¢–û–í")
    print("=" * 50)
    
    print("""
üìã –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –Ω—É–∂–Ω–æ:

1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ https://roboflow.com
2. –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è
3. –í—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤:
   
   üîß –¶–∞—Ä–∞–ø–∏–Ω—ã –∏ –≤–º—è—Ç–∏–Ω—ã:
   - https://universe.roboflow.com/seva-at1qy/rust-and-scrach
   - https://universe.roboflow.com/carpro/car-scratch-and-dent
   - https://universe.roboflow.com/project-kmnth/car-scratch-xgxzs

üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
1. –û—Ç–∫—Ä–æ–π—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
2. –ù–∞–∂–º–∏—Ç–µ "Download Dataset"
3. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç "Folder Structure"
4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–≥—Ä—É–∑–∫–∏
5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ—ë –≤ –ø–∞–ø–∫–µ ml/

–ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã:
curl -L "https://app.roboflow.com/ds/..." > dataset.zip
""")

def create_manual_structure():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä—É—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
    
    print("üìÅ –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è —Ä—É—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    data_dir = Path('../data')
    data_dir.mkdir(exist_ok=True)
    
    folders = {
        'clean': '–ß–∏—Å—Ç—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –±–µ–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π',
        'dirty': '–ì—Ä—è–∑–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏', 
        'intact': '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –±–µ–∑ —Ü–∞—Ä–∞–ø–∏–Ω –∏ –≤–º—è—Ç–∏–Ω',
        'damaged': '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å —Ü–∞—Ä–∞–ø–∏–Ω–∞–º–∏, –≤–º—è—Ç–∏–Ω–∞–º–∏, —Ä–∂–∞–≤—á–∏–Ω–æ–π'
    }
    
    for folder, description in folders.items():
        folder_path = data_dir / folder
        folder_path.mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º README –≤ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–µ
        readme_path = folder_path / 'README.md'
        with open(readme_path, 'w', encoding='utf-8') as f:
            f.write(f"""# {folder.title()}

{description}

## –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º:
- –§–æ—Ä–º–∞—Ç—ã: JPG, PNG
- –ú–∏–Ω–∏–º—É–º: 100 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 500+ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: –ª—é–±–æ–µ (–±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ –¥–æ 224x224)

## –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:
- Roboflow –¥–∞—Ç–∞—Å–µ—Ç—ã
- Google Images
- –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
- Kaggle –¥–∞—Ç–∞—Å–µ—Ç—ã

## –ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞:
- "car scratches dataset"
- "vehicle damage detection"
- "automotive condition assessment"
""")
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∞!")
    print(f"üìÅ –ü—É—Ç—å: {data_dir.absolute()}")

def convert_roboflow_to_folders(dataset_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Roboflow –¥–∞—Ç–∞—Å–µ—Ç–∞ –≤ –ø–∞–ø–∫–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º"""
    
    dataset_path = Path(dataset_path)
    
    if not dataset_path.exists():
        print(f"‚ùå –î–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {dataset_path}")
        return
    
    print(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç–∞—Å–µ—Ç: {dataset_path}")
    
    # –ò—â–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
    annotations_files = list(dataset_path.glob('**/*.json'))
    
    if not annotations_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã JSON –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤
    output_dir = Path('../data')
    output_dir.mkdir(exist_ok=True)
    
    class_folders = {
        'clean': output_dir / 'clean',
        'dirty': output_dir / 'dirty', 
        'intact': output_dir / 'intact',
        'damaged': output_dir / 'damaged'
    }
    
    for folder in class_folders.values():
        folder.mkdir(exist_ok=True)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
    processed = 0
    
    for ann_file in annotations_files:
        try:
            with open(ann_file, 'r') as f:
                data = json.load(f)
            
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_name = ann_file.stem + '.jpg'
            image_path = ann_file.parent / image_name
            
            if not image_path.exists():
                image_name = ann_file.stem + '.png'
                image_path = ann_file.parent / image_name
            
            if not image_path.exists():
                continue
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –ø–æ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º
            has_damage = False
            
            if 'annotations' in data:
                for annotation in data['annotations']:
                    if 'category_name' in annotation:
                        category = annotation['category_name'].lower()
                        if any(word in category for word in ['scratch', 'dent', 'rust', 'damage']):
                            has_damage = True
                            break
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É
            if has_damage:
                dest_folder = class_folders['damaged']
            else:
                dest_folder = class_folders['intact']
            
            dest_path = dest_folder / f"{processed:04d}_{image_path.name}"
            shutil.copy2(image_path, dest_path)
            
            processed += 1
            
            if processed % 100 == 0:
                print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {ann_file}: {e}")
    
    print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

def download_sample_images():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    # –ü—Ä–∏–º–µ—Ä—ã URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
    sample_urls = {
        'clean': [
            'https://example.com/clean_car1.jpg',
            'https://example.com/clean_car2.jpg',
        ],
        'damaged': [
            'https://example.com/damaged_car1.jpg', 
            'https://example.com/damaged_car2.jpg',
        ]
    }
    
    data_dir = Path('../data')
    
    for category, urls in sample_urls.items():
        category_dir = data_dir / category
        category_dir.mkdir(exist_ok=True)
        
        for i, url in enumerate(urls):
            try:
                filename = category_dir / f"sample_{i+1}.jpg"
                download_file(url, filename)
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {url}: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöó –ó–ê–ì–†–£–ó–ß–ò–ö –î–ê–¢–ê–°–ï–¢–û–í –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô")
    print("=" * 60)
    
    print("""
–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:

1. ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Roboflow (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
2. üìÅ –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ä—É—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏  
3. üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Roboflow –¥–∞—Ç–∞—Å–µ—Ç
4. üñºÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): """, end='')
    
    try:
        choice = input().strip()
        
        if choice == '1':
            setup_roboflow_dataset()
        elif choice == '2':
            create_manual_structure()
        elif choice == '3':
            dataset_path = input("–ü—É—Ç—å –∫ Roboflow –¥–∞—Ç–∞—Å–µ—Ç—É: ").strip()
            convert_roboflow_to_folders(dataset_path)
        elif choice == '4':
            download_sample_images()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            
    except KeyboardInterrupt:
        print("\nüëã –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()