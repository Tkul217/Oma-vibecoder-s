#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π ML –º–æ–¥–µ–ª–∏
"""

import os
import shutil
from pathlib import Path

def create_data_structure():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üèóÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è...")
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É data
    data_dir = Path('../data')
    data_dir.mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è 4 –∫–ª–∞—Å—Å–æ–≤
    folders = [
        'clean_intact',     # —á–∏—Å—Ç—ã–µ —Ü–µ–ª—ã–µ –º–∞—à–∏–Ω—ã
        'clean_damaged',    # —á–∏—Å—Ç—ã–µ –±–∏—Ç—ã–µ –º–∞—à–∏–Ω—ã  
        'dirty_intact',     # –≥—Ä—è–∑–Ω—ã–µ —Ü–µ–ª—ã–µ –º–∞—à–∏–Ω—ã
        'dirty_damaged'     # –≥—Ä—è–∑–Ω—ã–µ –±–∏—Ç—ã–µ –º–∞—à–∏–Ω—ã
    ]
    
    for folder in folders:
        folder_path = data_dir / folder
        folder_path.mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º README –≤ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–µ
        readme_path = folder_path / 'README.md'
        with open(readme_path, 'w', encoding='utf-8') as f:
            f.write(f"""# {folder.replace('_', ' ').title()}

–ü–æ–º–µ—Å—Ç–∏—Ç–µ —Å—é–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: **{folder.replace('_', ' ')}**

## –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º:
- –§–æ—Ä–º–∞—Ç—ã: JPG, PNG, BMP, TIFF
- –ú–∏–Ω–∏–º—É–º: 50 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 200+ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- –ö–∞—á–µ—Å—Ç–≤–æ: —á–µ–º –≤—ã—à–µ, —Ç–µ–º –ª—É—á—à–µ

## –ü—Ä–∏–º–µ—Ä—ã:
- –•–æ—Ä–æ—à–æ –≤–∏–¥–∏–º—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
- –†–∞–∑–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã (—Å–ø–µ—Ä–µ–¥–∏, —Å–±–æ–∫—É, —Å–∑–∞–¥–∏)
- –†–∞–∑–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
- –†–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
""")
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∞!")
    print(f"üìÅ –ü—É—Ç—å: {data_dir.absolute()}")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –†–∞–∑–ª–æ–∂–∏—Ç–µ –≤–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –ø–∞–ø–∫–∞–º:")
    for folder in folders:
        print(f"   - data/{folder}/ - {folder.replace('_', ' ')}")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python train_unified_model.py")

def check_data():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    
    data_dir = Path('../data')
    
    if not data_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ data/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False
    
    folders = ['clean_intact', 'clean_damaged', 'dirty_intact', 'dirty_damaged']
    total_images = 0
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
    
    for folder in folders:
        folder_path = data_dir / folder
        if folder_path.exists():
            # –ü–æ–¥—Å—á–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            image_extensions = {'.jpg', '.jpeg', '.png', '.bmp', '.tiff'}
            images = [f for f in folder_path.iterdir() 
                     if f.is_file() and f.suffix.lower() in image_extensions]
            
            count = len(images)
            total_images += count
            
            status = "‚úÖ" if count >= 50 else "‚ö†Ô∏è" if count > 0 else "‚ùå"
            print(f"  {status} {folder}: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        else:
            print(f"  ‚ùå {folder}: –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    print(f"\nüìä –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}")
    
    if total_images >= 200:
        print("üéâ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!")
        return True
    elif total_images > 0:
        print("‚ö†Ô∏è  –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 200 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (50 –Ω–∞ –∫–ª–∞—Å—Å)")
        return True
    else:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!")
        return False

def main():
    print("üöÄ –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–£–ß–ï–ù–ò–Ø ML –ú–û–î–ï–õ–ò")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    create_data_structure()
    
    print("\n" + "=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    has_data = check_data()
    
    print("\n" + "=" * 50)
    print("üìù –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
    print("1. –†–∞–∑–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –ø–∞–ø–∫–∞–º data/")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python train_unified_model.py")
    print("3. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è")
    print("4. –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω–∏—Ç mock –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")

if __name__ == "__main__":
    main()