from flask import Flask, request, jsonify, render_template_string
from flask_cors import CORS
from PIL import Image
import io
import os
import time
import logging
from car_model import CarAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
try:
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    model_path = 'best_model.pth' if os.path.exists('best_model.pth') else None
    analyzer = CarAnalyzer(model_path=model_path)
    logger.info("‚úÖ ML –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    analyzer = None
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")

# HTML —à–∞–±–ª–æ–Ω –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
WEB_INTERFACE = '''
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üöó inDrive Car Analysis</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 50px auto; padding: 20px; }
        .upload-area { border: 2px dashed #ccc; border-radius: 10px; padding: 40px; text-align: center; margin: 20px 0; }
        .upload-area:hover { border-color: #007bff; }
        .result { margin: 20px 0; padding: 20px; background: #f8f9fa; border-radius: 10px; }
        .success { background: #d4edda; }
        .warning { background: #fff3cd; }
        .danger { background: #f8d7da; }
        button { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; }
        button:hover { background: #0056b3; }
        .hidden { display: none; }
        img { max-width: 100%; height: auto; margin: 10px 0; }
    </style>
</head>
<body>
    <h1>üöó inDrive Car Analysis API</h1>
    <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è</p>
    
    <div class="upload-area" onclick="document.getElementById('fileInput').click()">
        <p>üì∏ –ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</p>
        <input type="file" id="fileInput" accept="image/*" style="display: none;" onchange="uploadImage()">
    </div>
    
    <div id="loading" class="hidden">‚è≥ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...</div>
    <div id="preview"></div>
    <div id="results"></div>
    
    <h3>üì° API Endpoints:</h3>
    <ul>
        <li><a href="/health">GET /health</a> - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è</li>
        <li>POST /predict - –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</li>
        <li><a href="/info">GET /info</a> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API</li>
    </ul>

    <script>
        async function uploadImage() {
            const fileInput = document.getElementById('fileInput');
            const file = fileInput.files[0];
            
            if (!file) return;
            
            // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é
            const preview = document.getElementById('preview');
            const img = document.createElement('img');
            img.src = URL.createObjectURL(file);
            preview.innerHTML = '<h3>üì∑ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</h3>';
            preview.appendChild(img);
            
            // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
            document.getElementById('loading').classList.remove('hidden');
            document.getElementById('results').innerHTML = '';
            
            // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∞–Ω–∞–ª–∏–∑
            const formData = new FormData();
            formData.append('image', file);
            
            try {
                const response = await fetch('/predict', {
                    method: 'POST',
                    body: formData
                });
                
                const data = await response.json();
                displayResults(data);
                
            } catch (error) {
                displayResults({success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º'});
            }
            
            document.getElementById('loading').classList.add('hidden');
        }
        
        function displayResults(data) {
            const resultsDiv = document.getElementById('results');
            
            if (data.success) {
                resultsDiv.innerHTML = `
                    <div class="result success">
                        <h3>‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</h3>
                        <p><strong>üßΩ –ß–∏—Å—Ç–æ—Ç–∞:</strong> ${data.cleanliness.class} (${Math.round(data.cleanliness.confidence * 100)}%)</p>
                        <p><strong>üîß –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è:</strong> ${data.damage.class} (${Math.round(data.damage.confidence * 100)}%)</p>
                        <p><strong>üìä –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</strong> ${data.overall_condition}</p>
                        <p><strong>ü§ñ –ú–æ–¥–µ–ª—å:</strong> ${data.model_trained ? '–û–±—É—á–µ–Ω–Ω–∞—è' : '–î–µ–º–æ —Ä–µ–∂–∏–º'}</p>
                        <h4>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h4>
                        <ul>${data.recommendations.map(r => '<li>' + r + '</li>').join('')}</ul>
                        <small>‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${data.metadata?.processing_time_ms || 'N/A'} –º—Å</small>
                    </div>
                `;
            } else {
                resultsDiv.innerHTML = `
                    <div class="result danger">
                        <h3>‚ùå –û—à–∏–±–∫–∞</h3>
                        <p>${data.error}</p>
                    </div>
                `;
            }
        }
    </script>
</body>
</html>
'''

@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    return render_template_string(WEB_INTERFACE)

@app.route('/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    return jsonify({
        'status': 'healthy',
        'service': 'inDrive Car Analysis API',
        'version': '1.0.0',
        'model_loaded': analyzer is not None,
        'model_trained': analyzer.trained if analyzer else False,
        'endpoints': ['/', '/health', '/predict', '/info']
    })

@app.route('/info')
def info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API"""
    return jsonify({
        'service': 'inDrive Car Analysis API',
        'description': '–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º',
        'version': '1.0.0',
        'model_status': 'loaded' if analyzer else 'error',
        'model_trained': analyzer.trained if analyzer else False,
        'capabilities': [
            '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å—Ç–æ—Ç—ã (—á–∏—Å—Ç—ã–π/–≥—Ä—è–∑–Ω—ã–π)',
            '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π (—Ü–µ–ª—ã–π/–±–∏—Ç—ã–π)',
            '–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è',
            '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é'
        ],
        'usage': {
            'method': 'POST',
            'endpoint': '/predict',
            'content_type': 'multipart/form-data',
            'field_name': 'image',
            'max_size': '10MB'
        }
    })

@app.route('/predict', methods=['POST'])
def predict():
    """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    start_time = time.time()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏
        if analyzer is None:
            return jsonify({
                'success': False,
                'error': 'ML –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'
            }), 500
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
        if 'image' not in request.files:
            return jsonify({
                'success': False,
                'error': '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∑–∞–ø—Ä–æ—Å–µ'
            }), 400
        
        file = request.files['image']
        if file.filename == '':
            return jsonify({
                'success': False,
                'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'
            }), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
        file.seek(0, os.SEEK_END)
        file_size = file.tell()
        file.seek(0)
        
        if file_size > 10 * 1024 * 1024:  # 10MB
            return jsonify({
                'success': False,
                'error': '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 10MB)'
            }), 400
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        try:
            image = Image.open(io.BytesIO(file.read())).convert('RGB')
            logger.info(f"–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {file.filename}, —Ä–∞–∑–º–µ—Ä: {image.size}")
        except Exception as e:
            return jsonify({
                'success': False,
                'error': f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}'
            }), 400
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        result = analyzer.analyze_image(image)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        processing_time = round((time.time() - start_time) * 1000, 2)
        result.update({
            'success': True,
            'filename': file.filename,
            'file_size_kb': round(file_size / 1024, 2),
            'metadata': {
                'processing_time_ms': processing_time,
                'image_size': list(image.size),
                'model_version': 'trained-1.0' if analyzer.trained else 'demo-1.0'
            }
        })
        
        logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {result['overall_condition']}")
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5010))
    debug = os.environ.get('DEBUG', 'True').lower() == 'true'
    
    print("=" * 60)
    print("üöó inDrive Car Analysis API")
    print("=" * 60)
    print(f"üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:{port}")
    print(f"üì° API: http://localhost:{port}/predict") 
    print(f"‚ù§Ô∏è  Health: http://localhost:{port}/health")
    print(f"üîß Debug: {debug}")
    print("=" * 60)
    
    app.run(host='0.0.0.0', port=port, debug=debug)