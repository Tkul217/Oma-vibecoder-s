from flask import Flask, request, jsonify, render_template_string
from flask_cors import CORS
from PIL import Image
import io
import os
import time
import logging
from improved_car_model import AdvancedCarAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
try:
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    model_path = 'best_improved_model.pth' if os.path.exists('best_improved_model.pth') else 'best_model.pth'
    analyzer = AdvancedCarAnalyzer(model_path=model_path, confidence_threshold=0.7)
    logger.info("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è ML –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    analyzer = None
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")

# –£–ª—É—á—à–µ–Ω–Ω—ã–π HTML —à–∞–±–ª–æ–Ω
WEB_INTERFACE = '''
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üöó inDrive Advanced Car Analysis</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container { 
            max-width: 900px; 
            margin: 0 auto; 
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        .header h1 { font-size: 2.5em; margin-bottom: 10px; }
        .header p { font-size: 1.2em; opacity: 0.9; }
        .content { padding: 40px; }
        .upload-area { 
            border: 3px dashed #667eea; 
            border-radius: 15px; 
            padding: 60px 40px; 
            text-align: center; 
            margin: 30px 0;
            transition: all 0.3s ease;
            cursor: pointer;
            background: #f8f9ff;
        }
        .upload-area:hover { 
            border-color: #764ba2; 
            background: #f0f2ff;
            transform: translateY(-2px);
        }
        .upload-area.dragover {
            border-color: #4CAF50;
            background: #e8f5e8;
        }
        .result { 
            margin: 30px 0; 
            padding: 25px; 
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        .success { background: linear-gradient(135deg, #d4edda, #c3e6cb); }
        .warning { background: linear-gradient(135deg, #fff3cd, #ffeaa7); }
        .danger { background: linear-gradient(135deg, #f8d7da, #f5c6cb); }
        .info { background: linear-gradient(135deg, #d1ecf1, #bee5eb); }
        button { 
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white; 
            padding: 15px 30px; 
            border: none; 
            border-radius: 25px; 
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
        }
        button:hover { 
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);
        }
        .hidden { display: none; }
        img { 
            max-width: 100%; 
            height: auto; 
            margin: 15px 0; 
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        .metric-card {
            background: white;
            padding: 20px;
            border-radius: 10px;
            margin: 10px 0;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            border-left: 4px solid #667eea;
        }
        .confidence-bar {
            background: #e9ecef;
            border-radius: 10px;
            height: 20px;
            margin: 10px 0;
            overflow: hidden;
        }
        .confidence-fill {
            height: 100%;
            border-radius: 10px;
            transition: width 0.5s ease;
        }
        .high-confidence { background: linear-gradient(90deg, #28a745, #20c997); }
        .medium-confidence { background: linear-gradient(90deg, #ffc107, #fd7e14); }
        .low-confidence { background: linear-gradient(90deg, #dc3545, #e83e8c); }
        .quality-score {
            font-size: 2em;
            font-weight: bold;
            text-align: center;
            margin: 20px 0;
        }
        .score-excellent { color: #28a745; }
        .score-good { color: #ffc107; }
        .score-poor { color: #dc3545; }
        .recommendations {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
        }
        .recommendations ul {
            list-style: none;
            padding: 0;
        }
        .recommendations li {
            padding: 8px 0;
            border-bottom: 1px solid #dee2e6;
        }
        .recommendations li:last-child {
            border-bottom: none;
        }
        .api-info {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
        }
        .api-info h3 {
            color: #667eea;
            margin-bottom: 15px;
        }
        .api-info ul {
            list-style: none;
            padding: 0;
        }
        .api-info li {
            padding: 5px 0;
            border-bottom: 1px solid #dee2e6;
        }
        .api-info a {
            color: #667eea;
            text-decoration: none;
        }
        .api-info a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üöó inDrive Advanced Car Analysis</h1>
            <p>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò</p>
        </div>
        
        <div class="content">
            <div class="upload-area" onclick="document.getElementById('fileInput').click()" 
                 ondrop="handleDrop(event)" ondragover="handleDragOver(event)" ondragleave="handleDragLeave(event)">
                <div style="font-size: 3em; margin-bottom: 20px;">üì∏</div>
                <h3>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è</h3>
                <p>–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</p>
                <input type="file" id="fileInput" accept="image/*" style="display: none;" onchange="uploadImage()">
            </div>
            
            <div id="loading" class="hidden">
                <div style="text-align: center; padding: 40px;">
                    <div style="font-size: 2em; margin-bottom: 20px;">‚è≥</div>
                    <h3>–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...</h3>
                    <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ</p>
                </div>
            </div>
            
            <div id="preview"></div>
            <div id="results"></div>
            
            <div class="api-info">
                <h3>üì° API Endpoints:</h3>
                <ul>
                    <li><a href="/health">GET /health</a> - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è</li>
                    <li>POST /predict - –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</li>
                    <li><a href="/info">GET /info</a> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API</li>
                </ul>
            </div>
        </div>
    </div>

    <script>
        function handleDragOver(e) {
            e.preventDefault();
            e.currentTarget.classList.add('dragover');
        }
        
        function handleDragLeave(e) {
            e.currentTarget.classList.remove('dragover');
        }
        
        function handleDrop(e) {
            e.preventDefault();
            e.currentTarget.classList.remove('dragover');
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                document.getElementById('fileInput').files = files;
                uploadImage();
            }
        }
        
        async function uploadImage() {
            const fileInput = document.getElementById('fileInput');
            const file = fileInput.files[0];
            
            if (!file) return;
            
            // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é
            const preview = document.getElementById('preview');
            const img = document.createElement('img');
            img.src = URL.createObjectURL(file);
            preview.innerHTML = '<h3>üì∑ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</h3>';
            preview.appendChild(img);
            
            // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
            document.getElementById('loading').classList.remove('hidden');
            document.getElementById('results').innerHTML = '';
            
            // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∞–Ω–∞–ª–∏–∑
            const formData = new FormData();
            formData.append('image', file);
            
            try {
                const response = await fetch('/predict', {
                    method: 'POST',
                    body: formData
                });
                
                const data = await response.json();
                displayResults(data);
                
            } catch (error) {
                displayResults({success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º'});
            }
            
            document.getElementById('loading').classList.add('hidden');
        }
        
        function displayResults(data) {
            const resultsDiv = document.getElementById('results');
            
            if (data.success) {
                const cleanliness = data.cleanliness;
                const damage = data.damage;
                const qualityScore = data.quality_score || 0;
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
                let scoreClass = 'score-poor';
                if (qualityScore >= 80) scoreClass = 'score-excellent';
                else if (qualityScore >= 60) scoreClass = 'score-good';
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                function getConfidenceClass(conf) {
                    if (conf >= 0.8) return 'high-confidence';
                    if (conf >= 0.6) return 'medium-confidence';
                    return 'low-confidence';
                }
                
                resultsDiv.innerHTML = `
                    <div class="result success">
                        <h3>‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</h3>
                        
                        <div class="quality-score ${scoreClass}">
                            ${qualityScore}%
                        </div>
                        
                        <div class="metric-card">
                            <h4>üßΩ –ß–∏—Å—Ç–æ—Ç–∞: ${cleanliness.class}</h4>
                            <div class="confidence-bar">
                                <div class="confidence-fill ${getConfidenceClass(cleanliness.confidence)}" 
                                     style="width: ${cleanliness.confidence * 100}%"></div>
                            </div>
                            <p>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(cleanliness.confidence * 100)}% (${cleanliness.status})</p>
                        </div>
                        
                        <div class="metric-card">
                            <h4>üîß –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è: ${damage.class}</h4>
                            <div class="confidence-bar">
                                <div class="confidence-fill ${getConfidenceClass(damage.confidence)}" 
                                     style="width: ${damage.confidence * 100}%"></div>
                            </div>
                            <p>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(damage.confidence * 100)}% (${damage.status})</p>
                        </div>
                        
                        <div class="metric-card">
                            <h4>üìä –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${data.overall_condition}</h4>
                            <p>–ö–ª–∞—Å—Å: ${data.overall_class || 'N/A'}</p>
                            <p>–ö–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞: ${data.analysis_quality || 'N/A'}</p>
                        </div>
                        
                        <div class="recommendations">
                            <h4>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h4>
                            <ul>${data.recommendations.map(r => '<li>' + r + '</li>').join('')}</ul>
                        </div>
                        
                        <div style="text-align: center; margin-top: 20px; color: #666;">
                            <small>‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${data.metadata?.processing_time_ms || 'N/A'} –º—Å</small>
                            <br>
                            <small>ü§ñ –ú–æ–¥–µ–ª—å: ${data.model_trained ? '–û–±—É—á–µ–Ω–Ω–∞—è (—É–ª—É—á—à–µ–Ω–Ω–∞—è)' : '–î–µ–º–æ —Ä–µ–∂–∏–º'}</small>
                        </div>
                    </div>
                `;
            } else {
                resultsDiv.innerHTML = `
                    <div class="result danger">
                        <h3>‚ùå –û—à–∏–±–∫–∞</h3>
                        <p>${data.error}</p>
                    </div>
                `;
            }
        }
    </script>
</body>
</html>
'''

@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    return render_template_string(WEB_INTERFACE)

@app.route('/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    return jsonify({
        'status': 'healthy',
        'service': 'inDrive Advanced Car Analysis API',
        'version': '2.0.0',
        'model_loaded': analyzer is not None,
        'model_trained': analyzer.trained if analyzer else False,
        'model_type': 'improved' if analyzer and hasattr(analyzer, 'confidence_threshold') else 'basic',
        'endpoints': ['/', '/health', '/predict', '/info']
    })

@app.route('/info')
def info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API"""
    return jsonify({
        'service': 'inDrive Advanced Car Analysis API',
        'description': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò',
        'version': '2.0.0',
        'model_status': 'loaded' if analyzer else 'error',
        'model_trained': analyzer.trained if analyzer else False,
        'model_type': 'improved' if analyzer and hasattr(analyzer, 'confidence_threshold') else 'basic',
        'capabilities': [
            '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å—Ç–æ—Ç—ã (—á–∏—Å—Ç—ã–π/–≥—Ä—è–∑–Ω—ã–π) —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é',
            '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π (—Ü–µ–ª—ã–π/–±–∏—Ç—ã–π) —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π',
            '–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–∫–æ—Ä–æ–º',
            '–£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é',
            '–ê–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏',
            '–î–µ—Ç–µ–∫—Ü–∏—è –∏ –æ–±—Ä–µ–∑–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è',
            '–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞'
        ],
        'improvements': [
            'EfficientNet-B3 backbone –¥–ª—è –ª—É—á—à–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤',
            'Attention –º–µ—Ö–∞–Ω–∏–∑–º—ã (Spatial + Channel)',
            'Focal Loss –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏',
            '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö',
            'Early stopping –∏ learning rate scheduling',
            '–ê–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è',
            '–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'
        ],
        'usage': {
            'method': 'POST',
            'endpoint': '/predict',
            'content_type': 'multipart/form-data',
            'field_name': 'image',
            'max_size': '10MB',
            'supported_formats': ['JPEG', 'PNG', 'BMP', 'WEBP']
        }
    })

@app.route('/predict', methods=['POST'])
def predict():
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    start_time = time.time()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏
        if analyzer is None:
            return jsonify({
                'success': False,
                'error': 'ML –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'
            }), 500
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
        if 'image' not in request.files:
            return jsonify({
                'success': False,
                'error': '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∑–∞–ø—Ä–æ—Å–µ'
            }), 400
        
        file = request.files['image']
        if file.filename == '':
            return jsonify({
                'success': False,
                'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'
            }), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
        file.seek(0, os.SEEK_END)
        file_size = file.tell()
        file.seek(0)
        
        if file_size > 10 * 1024 * 1024:  # 10MB
            return jsonify({
                'success': False,
                'error': '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 10MB)'
            }), 400
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        try:
            image = Image.open(io.BytesIO(file.read())).convert('RGB')
            logger.info(f"–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {file.filename}, —Ä–∞–∑–º–µ—Ä: {image.size}")
        except Exception as e:
            return jsonify({
                'success': False,
                'error': f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}'
            }), 400
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –∞–Ω—Å–∞–º–±–ª–µ–≤—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
        result = analyzer.analyze_image(image, use_ensemble=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        processing_time = round((time.time() - start_time) * 1000, 2)
        result.update({
            'success': True,
            'filename': file.filename,
            'file_size_kb': round(file_size / 1024, 2),
            'metadata': {
                'processing_time_ms': processing_time,
                'image_size': list(image.size),
                'model_version': 'improved-2.0' if analyzer.trained else 'demo-2.0',
                'ensemble_used': True,
                'confidence_threshold': analyzer.confidence_threshold if hasattr(analyzer, 'confidence_threshold') else 0.5
            }
        })
        
        logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {result['overall_condition']}, –∫–∞—á–µ—Å—Ç–≤–æ: {result.get('quality_score', 'N/A')}")
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5010))
    debug = os.environ.get('DEBUG', 'True').lower() == 'true'
    
    print("=" * 70)
    print("üöó inDrive Advanced Car Analysis API v2.0")
    print("=" * 70)
    print(f"üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:{port}")
    print(f"üì° API: http://localhost:{port}/predict") 
    print(f"‚ù§Ô∏è  Health: http://localhost:{port}/health")
    print(f"üîß Debug: {debug}")
    print(f"ü§ñ –ú–æ–¥–µ–ª—å: {'–£–ª—É—á—à–µ–Ω–Ω–∞—è' if analyzer and hasattr(analyzer, 'confidence_threshold') else '–ë–∞–∑–æ–≤–∞—è'}")
    print("=" * 70)
    
    app.run(host='0.0.0.0', port=port, debug=debug)
