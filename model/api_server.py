from flask import Flask, request, jsonify
from flask_cors import CORS
from PIL import Image
import io
import os
import time
import logging
from improved_car_model import AdvancedCarAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
try:
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    model_path = 'best_improved_model.pth' if os.path.exists('best_improved_model.pth') else 'best_model.pth'
    analyzer = AdvancedCarAnalyzer(model_path=model_path, confidence_threshold=0.7)
    logger.info("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è ML –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    analyzer = None
    logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: %s", e)

@app.route('/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    return jsonify({
        'status': 'healthy',
        'service': 'inDrive Advanced Car Analysis API',
        'version': '2.0.0',
        'model_loaded': analyzer is not None,
        'model_trained': analyzer.trained if analyzer else False,
        'model_type': 'improved' if analyzer and hasattr(analyzer, 'confidence_threshold') else 'basic',
        'endpoints': ['/health', '/predict', '/info']
    })

@app.route('/info')
def info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API"""
    return jsonify({
        'service': 'inDrive Advanced Car Analysis API',
        'description': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò',
        'version': '2.0.0',
        'model_status': 'loaded' if analyzer else 'error',
        'model_trained': analyzer.trained if analyzer else False,
        'model_type': 'improved' if analyzer and hasattr(analyzer, 'confidence_threshold') else 'basic',
        'capabilities': [
            '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å—Ç–æ—Ç—ã (—á–∏—Å—Ç—ã–π/–≥—Ä—è–∑–Ω—ã–π) —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é',
            '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π (—Ü–µ–ª—ã–π/–±–∏—Ç—ã–π) —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π',
            '–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–∫–æ—Ä–æ–º',
            '–£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é',
            '–ê–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏',
            '–î–µ—Ç–µ–∫—Ü–∏—è –∏ –æ–±—Ä–µ–∑–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è',
            '–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞'
        ],
        'improvements': [
            'EfficientNet-B3 backbone –¥–ª—è –ª—É—á—à–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤',
            'Attention –º–µ—Ö–∞–Ω–∏–∑–º—ã (Spatial + Channel)',
            'Focal Loss –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏',
            '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö',
            'Early stopping –∏ learning rate scheduling',
            '–ê–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è',
            '–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'
        ],
        'usage': {
            'method': 'POST',
            'endpoint': '/predict',
            'content_type': 'multipart/form-data',
            'parameter': 'image (—Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)',
            'response_format': 'JSON'
        },
        'team': 'oma vibecoders'
    })

@app.route('/predict', methods=['POST'])
def predict():
    """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    start_time = time.time()
    
    if not analyzer:
        return jsonify({
            'error': '–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞',
            'status': 'error'
        }), 500
    
    if 'image' not in request.files:
        return jsonify({
            'error': '–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω',
            'status': 'error'
        }), 400
    
    file = request.files['image']
    if file.filename == '':
        return jsonify({
            'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω',
            'status': 'error'
        }), 400
    
    try:
        # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.open(io.BytesIO(file.read()))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        logger.info("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: %s, —Ä–∞–∑–º–µ—Ä: %s", file.filename, image.size)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result = analyzer.analyze_image(image)
        
        processing_time = (time.time() - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = {
            'status': 'success',
            'cleanliness': {
                'class': result['cleanliness']['class'],
                'confidence': float(result['cleanliness']['confidence']),
            },
            'damage': {
                'class': result['damage']['class'],
                'confidence': float(result['damage']['confidence']),
            },
            'quality_score': result.get('quality_score', None),
            'overall_condition': result.get('overall_condition', None),
            'recommendations': result.get('recommendations', []),
            'metadata': {
                'processing_time_ms': round(processing_time, 2),
                'model_type': 'improved',
                'image_size': image.size,
                'filename': file.filename
            }
        }
        
        logger.info("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ %.2f–º—Å", processing_time)
        return jsonify(response)
        
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: %s", e)
        return jsonify({
            'error': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}',
            'status': 'error'
        }), 500

if __name__ == '__main__':
    print("üöó –ó–∞–ø—É—Å–∫ inDrive Car Analysis API (—Ç–æ–ª—å–∫–æ API)")
    print("=" * 50)
    print("üì° API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5010")
    print("üîó Endpoints:")
    print("   - POST /predict - –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    print("   - GET /health - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    print("   - GET /info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API")
    print("=" * 50)
    print("‚öõÔ∏è  –î–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ React —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥")
    print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev")
    print("=" * 50)
    
    app.run(host='0.0.0.0', port=5010, debug=False)
