import torch
import torch.nn as nn
import torch.nn.functional as F
from torchvision import transforms, models
from PIL import Image
import numpy as np
import random
import os

class CarConditionClassifier(nn.Module):
    def __init__(self):
        super(CarConditionClassifier, self).__init__()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ResNet50 –∫–∞–∫ backbone
        self.backbone = models.resnet50(weights=models.ResNet50_Weights.IMAGENET1K_V2)
        feature_dim = self.backbone.fc.in_features
        self.backbone.fc = nn.Identity()
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∏—Å—Ç–æ—Ç—ã (—á–∏—Å—Ç—ã–π/–≥—Ä—è–∑–Ω—ã–π)
        self.cleanliness_head = nn.Sequential(
            nn.Linear(feature_dim, 256),
            nn.ReLU(),
            nn.Dropout(0.3),
            nn.Linear(256, 2)
        )
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π (—Ü–µ–ª—ã–π/–±–∏—Ç—ã–π)
        self.damage_head = nn.Sequential(
            nn.Linear(feature_dim, 256),
            nn.ReLU(),
            nn.Dropout(0.3),
            nn.Linear(256, 2)
        )
    
    def forward(self, x):
        features = self.backbone(x)
        cleanliness_logits = self.cleanliness_head(features)
        damage_logits = self.damage_head(features)
        return cleanliness_logits, damage_logits

class CarAnalyzer:
    def __init__(self, model_path=None):
        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        self.model = CarConditionClassifier()
        self.model.to(self.device)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –µ—Å—Ç—å
        if model_path and os.path.exists(model_path):
            try:
                checkpoint = torch.load(model_path, map_location=self.device)
                self.model.load_state_dict(checkpoint['model_state_dict'])
                self.model.eval()
                print(f"‚úÖ –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {model_path}")
                self.trained = True
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
                print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å (–¥–µ–º–æ —Ä–µ–∂–∏–º)")
                self.model.eval()
                self.trained = False
        else:
            print("üîÑ –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ —Ä–µ–∂–∏–º")
            self.model.eval()
            self.trained = False
        
        # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.transform = transforms.Compose([
            transforms.Resize((224, 224)),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
        ])
        
        self.class_names = {
            'cleanliness': ['–ß–∏—Å—Ç—ã–π', '–ì—Ä—è–∑–Ω—ã–π'],
            'damage': ['–¶–µ–ª—ã–π', '–ë–∏—Ç—ã–π']
        }
    
    def analyze_image(self, image):
        """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        try:
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
            if isinstance(image, torch.Tensor):
                processed_image = image.unsqueeze(0)
            else:
                processed_image = self.transform(image).unsqueeze(0)
            
            processed_image = processed_image.to(self.device)
            
            # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
            if self.trained:
                with torch.no_grad():
                    cleanliness_logits, damage_logits = self.model(processed_image)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
                    cleanliness_probs = torch.softmax(cleanliness_logits, dim=1)
                    damage_probs = torch.softmax(damage_logits, dim=1)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                    cleanliness_pred = torch.argmax(cleanliness_probs, dim=1).item()
                    damage_pred = torch.argmax(damage_probs, dim=1).item()
                    
                    # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                    cleanliness_conf = float(cleanliness_probs[0][cleanliness_pred])
                    damage_conf = float(damage_probs[0][damage_pred])
                    
                    # –ö–ª–∞—Å—Å—ã
                    cleanliness_class = self.class_names['cleanliness'][cleanliness_pred]
                    damage_class = self.class_names['damage'][damage_pred]
                    
                    return self._format_result(cleanliness_class, damage_class, 
                                             cleanliness_conf, damage_conf, trained=True)
            
            # –ò–Ω–∞—á–µ –¥–µ–º–æ —Ä–µ–∂–∏–º
            return self._generate_demo_result()
            
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    def _format_result(self, cleanliness_class, damage_class, clean_conf, damage_conf, trained=False):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if cleanliness_class == '–ß–∏—Å—Ç—ã–π' and damage_class == '–¶–µ–ª—ã–π':
            overall = '–û—Ç–ª–∏—á–Ω–æ–µ'
        elif cleanliness_class == '–ì—Ä—è–∑–Ω—ã–π' and damage_class == '–¶–µ–ª—ã–π':
            overall = '–•–æ—Ä–æ—à–µ–µ (—Ç—Ä–µ–±—É–µ—Ç –º–æ–π–∫–∏)'
        elif cleanliness_class == '–ß–∏—Å—Ç—ã–π' and damage_class == '–ë–∏—Ç—ã–π':
            overall = '–¢—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞'
        else:
            overall = '–ü–ª–æ—Ö–æ–µ (—Ç—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞ –∏ –º–æ–π–∫–∏)'
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        if cleanliness_class == '–ì—Ä—è–∑–Ω—ã–π':
            if clean_conf > 0.8:
                recommendations.append('–ê–≤—Ç–æ–º–æ–±–∏–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –º–æ–π–∫–µ')
            else:
                recommendations.append('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–º—ã—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å')
            recommendations.append('–ß–∏—Å—Ç—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ–≤—ã—à–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –≤–æ–¥–∏—Ç–µ–ª—è')
        
        if damage_class == '–ë–∏—Ç—ã–π':
            if damage_conf > 0.8:
                recommendations.append('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è')
                recommendations.append('–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ—Ö–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–º–æ–Ω—Ç')
            else:
                recommendations.append('–í–æ–∑–º–æ–∂–Ω—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å–º–æ—Ç—Ä')
            recommendations.append('–£–≤–µ–¥–æ–º–∏—Ç–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è')
            recommendations.append('–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É inDrive')
        
        if not recommendations:
            recommendations.append('–ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!')
            recommendations.append('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ç–∞–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞')
        
        return {
            'cleanliness': {
                'class': cleanliness_class,
                'confidence': clean_conf
            },
            'damage': {
                'class': damage_class,
                'confidence': damage_conf
            },
            'overall_condition': overall,
            'recommendations': recommendations,
            'model_trained': trained
        }
    
    def _generate_demo_result(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        scenarios = [
            {'clean': 0, 'damage': 0, 'clean_conf': 0.92, 'damage_conf': 0.89},
            {'clean': 1, 'damage': 0, 'clean_conf': 0.87, 'damage_conf': 0.94},
            {'clean': 0, 'damage': 1, 'clean_conf': 0.76, 'damage_conf': 0.82},
            {'clean': 1, 'damage': 1, 'clean_conf': 0.91, 'damage_conf': 0.78},
        ]
        
        scenario = random.choice(scenarios)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ –∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        clean_conf = max(0.6, min(0.99, scenario['clean_conf'] + random.uniform(-0.05, 0.05)))
        damage_conf = max(0.6, min(0.99, scenario['damage_conf'] + random.uniform(-0.05, 0.05)))
        
        cleanliness_class = self.class_names['cleanliness'][scenario['clean']]
        damage_class = self.class_names['damage'][scenario['damage']]
        
        return self._format_result(cleanliness_class, damage_class, 
                                 clean_conf, damage_conf, trained=False)